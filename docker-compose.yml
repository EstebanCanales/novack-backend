services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '4000:4000'
    environment:
      - NODE_ENV=development
      - DB_TYPE=postgres
      - DB_HOST=postgres
      - DB_PORT=5430
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=spcedes
      - JWT_SECRET=UtahD6c3jgBkajP7eXmMu9E2FwGpRxQnSvCzKyV8ZfLtAqTs5bN4YdHr3WJ7mhk2
      - JWT_ACCESS_EXPIRATION=15m
      - JWT_REFRESH_EXPIRATION_DAYS=7
      - JWT_AUDIENCE=https://api.spcedes.com
      - JWT_ISSUER=SPCEDES_API
      - RESEND_API_KEY=${RESEND_API_KEY}
      - REDIS_HOST=redis-17374.c80.us-east-1-2.ec2.redns.redis-cloud.com
      - REDIS_PORT=17374
      - REDIS_USERNAME=default
      - REDIS_PASSWORD=vNrEVCdgtVb3A0Rr6Nb6H7JKKNxa4XYh
      - REDIS_TLS_ENABLED=true
      - REDIS_ENCRYPTION_KEY=${REDIS_ENCRYPTION_KEY:-secure_encryption_key_for_redis_data}
      - ESP32_AUTH_KEY=${ESP32_AUTH_KEY:-esp32_aQ9bP2cX8dZ7eW6fV5gT4hR3jS2kL1mN0}
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:16-alpine
    command: -p 5430
    ports:
      - '5430:5430'
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=spcedes
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -p 5430']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
