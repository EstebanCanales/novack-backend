#!/bin/bash

echo "üöÄ Iniciando stack ELK + Aplicaci√≥n de forma ordenada..."

# Limpiar contenedores anteriores
echo "üßπ Limpiando contenedores anteriores..."
docker-compose down -v --remove-orphans

# Crear directorios necesarios
echo "üìÅ Creando directorios necesarios..."
mkdir -p logs
mkdir -p config/logstash
mkdir -p config/filebeat

# Dar permisos correctos
echo "üîê Configurando permisos..."
chmod 777 logs
chmod 644 config/filebeat/filebeat.yml
chmod 644 config/logstash/logstash.conf

# Paso 1: Iniciar Elasticsearch
echo "1Ô∏è‚É£ Iniciando Elasticsearch..."
docker-compose up -d elasticsearch

# Esperar a que Elasticsearch est√© listo
echo "‚è≥ Esperando a que Elasticsearch est√© listo..."
timeout=300
counter=0
while ! curl -s http://localhost:9200/_cluster/health | grep -q '"status":"green\|yellow"'; do
    sleep 5
    counter=$((counter + 5))
    if [ $counter -ge $timeout ]; then
        echo "‚ùå Timeout esperando Elasticsearch"
        exit 1
    fi
    echo "   Elasticsearch a√∫n no est√° listo... ($counter/$timeout segundos)"
done
echo "‚úÖ Elasticsearch est√° listo!"

# Paso 2: Iniciar Logstash
echo "2Ô∏è‚É£ Iniciando Logstash..."
docker-compose up -d logstash

# Esperar a que Logstash est√© listo
echo "‚è≥ Esperando a que Logstash est√© listo..."
counter=0
while ! curl -s http://localhost:9600 | grep -q 'logstash'; do
    sleep 5
    counter=$((counter + 5))
    if [ $counter -ge $timeout ]; then
        echo "‚ùå Timeout esperando Logstash"
        exit 1
    fi
    echo "   Logstash a√∫n no est√° listo... ($counter/$timeout segundos)"
done
echo "‚úÖ Logstash est√° listo!"

# Paso 3: Iniciar PostgreSQL
echo "3Ô∏è‚É£ Iniciando PostgreSQL..."
docker-compose up -d postgres

# Esperar a PostgreSQL
echo "‚è≥ Esperando a que PostgreSQL est√© listo..."
counter=0
while ! docker-compose exec -T postgres pg_isready -U postgres -d novack -p 5430; do
    sleep 2
    counter=$((counter + 2))
    if [ $counter -ge 60 ]; then
        echo "‚ùå Timeout esperando PostgreSQL"
        exit 1
    fi
    echo "   PostgreSQL a√∫n no est√° listo... ($counter/60 segundos)"
done
echo "‚úÖ PostgreSQL est√° listo!"

# Paso 4: Iniciar la aplicaci√≥n
echo "4Ô∏è‚É£ Iniciando la aplicaci√≥n..."
docker-compose up -d --build api

# Esperar a que la API est√© lista
echo "‚è≥ Esperando a que la API est√© lista..."
counter=0
while ! curl -s http://localhost:4000/health | grep -q 'ok'; do
    sleep 5
    counter=$((counter + 5))
    if [ $counter -ge 120 ]; then
        echo "‚ùå Timeout esperando la API"
        exit 1
    fi
    echo "   API a√∫n no est√° lista... ($counter/120 segundos)"
done
echo "‚úÖ API est√° lista!"

# Paso 5: Iniciar servicios complementarios
echo "5Ô∏è‚É£ Iniciando servicios complementarios..."
docker-compose up -d kibana filebeat

echo ""
echo "üéâ ¬°Todos los servicios est√°n listos!"
echo ""
echo "üìä URLs disponibles:"
echo "   ‚Ä¢ API:           http://localhost:4000"
echo "   ‚Ä¢ Health Check:  http://localhost:4000/health"
echo "   ‚Ä¢ Elasticsearch: http://localhost:9200"
echo "   ‚Ä¢ Kibana:        http://localhost:5601"
echo "   ‚Ä¢ Logstash API:  http://localhost:9600"
echo ""
echo "üìù Para ver los logs:"
echo "   docker-compose logs -f api"
echo "   docker-compose logs -f logstash"
echo "   docker-compose logs -f filebeat"
echo ""
echo "üõë Para detener todo:"
echo "   docker-compose down"
