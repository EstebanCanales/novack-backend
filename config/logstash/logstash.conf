input {
  tcp {
    port => 50000
    codec => json
  }
  udp {
    port => 50000
    codec => json
  }
  beats {
    port => 5044
  }
}

filter {
  json {
    source => "message"
    skip_on_invalid_json => true
  }
  
  if [correlationId] {
    mutate {
      add_field => { "[@metadata][correlation_id]" => "%{correlationId}" }
    }
  }
  
  # Procesamiento de timestamp
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    remove_field => [ "timestamp" ]
  }
  
  # Procesamiento de niveles de log
  if [level] {
    mutate {
      # Convertir nivel a lowercase para mejor filtrado
      lowercase => [ "level" ]
    }
  }
  
  # Agregar hostname si no estÃ¡ presente
  if ![hostname] {
    mutate {
      add_field => { "hostname" => "logstash" }
    }
  }
  
  # Asignar tipo a los logs
  if [message] =~ "ERROR" or [level] == "error" {
    mutate {
      add_field => { "log_type" => "error" }
    }
  } else if [message] =~ "WARN" or [level] == "warn" {
    mutate {
      add_field => { "log_type" => "warning" }
    }
  } else {
    mutate {
      add_field => { "log_type" => "info" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "novack-logs-%{+YYYY.MM.dd}"
    action => "index"
  }
  
  # Habilitar logs solo para errores
  if [level] == "error" {
    stdout {
      codec => rubydebug
    }
  }
} 
